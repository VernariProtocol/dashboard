/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IStore {
  export type OrderStruct = {
    Id: PromiseOrValue<BytesLike>;
    trackingNumber: PromiseOrValue<string>;
    company: PromiseOrValue<string>;
    status: PromiseOrValue<BigNumberish>;
    lastUpdate: PromiseOrValue<BigNumberish>;
    active: PromiseOrValue<boolean>;
    notes: PromiseOrValue<BytesLike>[];
    lastAutomationCheck: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type OrderStructOutput = [
    string,
    string,
    string,
    number,
    BigNumber,
    boolean,
    string[],
    BigNumber,
    BigNumber
  ] & {
    Id: string;
    trackingNumber: string;
    company: string;
    status: number;
    lastUpdate: BigNumber;
    active: boolean;
    notes: string[];
    lastAutomationCheck: BigNumber;
    value: BigNumber;
  };
}

export interface StoreInterface extends utils.Interface {
  functions: {
    "addFundsToStrategy()": FunctionFragment;
    "addOrder(bytes32,uint256,bool,address)": FunctionFragment;
    "addWhiteListedAddress(address)": FunctionFragment;
    "addWhitelistedToken(address)": FunctionFragment;
    "getAutomationInterval()": FunctionFragment;
    "getCompanyName()": FunctionFragment;
    "getLockedAssetTokenAmount(address)": FunctionFragment;
    "getLockedGasTokenAmount()": FunctionFragment;
    "getOrder(bytes32)": FunctionFragment;
    "getOrders()": FunctionFragment;
    "getSubscriptionId()": FunctionFragment;
    "getWhitelistedTokens()": FunctionFragment;
    "getWithdrawableAssetTokenAmount(address)": FunctionFragment;
    "getWithdrawableGasTokenAmount()": FunctionFragment;
    "initialize(address,address,bytes,uint64,uint96)": FunctionFragment;
    "orderList(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeWhiteListedAddress(address)": FunctionFragment;
    "removeWhitelistedToken(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setManager(address)": FunctionFragment;
    "setSubscriptionId(uint64)": FunctionFragment;
    "storeManager()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateOrder(bytes32,string,string)": FunctionFragment;
    "updateOrderStatus(bytes32,uint8)": FunctionFragment;
    "version()": FunctionFragment;
    "withdrawGasToken()": FunctionFragment;
    "withdrawTokenAsset(address)": FunctionFragment;
    "withdrawVaultGasToken(uint256)": FunctionFragment;
    "withdrawVaultTokenAsset(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addFundsToStrategy"
      | "addOrder"
      | "addWhiteListedAddress"
      | "addWhitelistedToken"
      | "getAutomationInterval"
      | "getCompanyName"
      | "getLockedAssetTokenAmount"
      | "getLockedGasTokenAmount"
      | "getOrder"
      | "getOrders"
      | "getSubscriptionId"
      | "getWhitelistedTokens"
      | "getWithdrawableAssetTokenAmount"
      | "getWithdrawableGasTokenAmount"
      | "initialize"
      | "orderList"
      | "owner"
      | "pause"
      | "paused"
      | "removeWhiteListedAddress"
      | "removeWhitelistedToken"
      | "renounceOwnership"
      | "setManager"
      | "setSubscriptionId"
      | "storeManager"
      | "transferOwnership"
      | "unpause"
      | "updateOrder"
      | "updateOrderStatus"
      | "version"
      | "withdrawGasToken"
      | "withdrawTokenAsset"
      | "withdrawVaultGasToken"
      | "withdrawVaultTokenAsset"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addFundsToStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addOrder",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhiteListedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistedToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAutomationInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompanyName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedAssetTokenAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedGasTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "getOrders", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawableAssetTokenAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawableGasTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "orderList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeWhiteListedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubscriptionId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateOrder",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrderStatus",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawGasToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokenAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawVaultGasToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawVaultTokenAsset",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addFundsToStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWhiteListedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAutomationInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompanyName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedAssetTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedGasTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawableAssetTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawableGasTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orderList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWhiteListedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSubscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawGasToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokenAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawVaultGasToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawVaultTokenAsset",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OrderCreated(bytes32,uint256)": EventFragment;
    "OrderUpdated(bytes32,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OrderCreatedEventObject {
  orderNumber: string;
  amount: BigNumber;
}
export type OrderCreatedEvent = TypedEvent<
  [string, BigNumber],
  OrderCreatedEventObject
>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export interface OrderUpdatedEventObject {
  orderNumber: string;
  status: number;
}
export type OrderUpdatedEvent = TypedEvent<
  [string, number],
  OrderUpdatedEventObject
>;

export type OrderUpdatedEventFilter = TypedEventFilter<OrderUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Store extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addFundsToStrategy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addOrder(
      orderNumber: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<boolean>,
      tokenAsset: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addWhiteListedAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addWhitelistedToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAutomationInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCompanyName(overrides?: CallOverrides): Promise<[string]>;

    getLockedAssetTokenAmount(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLockedGasTokenAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOrder(
      orderId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IStore.OrderStructOutput]>;

    getOrders(overrides?: CallOverrides): Promise<[IStore.OrderStructOutput[]]>;

    getSubscriptionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getWhitelistedTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getWithdrawableAssetTokenAmount(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWithdrawableGasTokenAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      manager: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      company: PromiseOrValue<BytesLike>,
      subId: PromiseOrValue<BigNumberish>,
      automationInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    orderList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        Id: string;
        trackingNumber: string;
        company: string;
        status: number;
        lastUpdate: BigNumber;
        active: boolean;
        lastAutomationCheck: BigNumber;
        value: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeWhiteListedAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeWhitelistedToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setManager(
      manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSubscriptionId(
      subId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeManager(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOrder(
      orderId: PromiseOrValue<BytesLike>,
      trackingNumber: PromiseOrValue<string>,
      shippingCompany: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOrderStatus(
      orderId: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    withdrawGasToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTokenAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawVaultGasToken(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawVaultTokenAsset(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addFundsToStrategy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addOrder(
    orderNumber: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    gasToken: PromiseOrValue<boolean>,
    tokenAsset: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addWhiteListedAddress(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addWhitelistedToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAutomationInterval(overrides?: CallOverrides): Promise<BigNumber>;

  getCompanyName(overrides?: CallOverrides): Promise<string>;

  getLockedAssetTokenAmount(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLockedGasTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getOrder(
    orderId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IStore.OrderStructOutput>;

  getOrders(overrides?: CallOverrides): Promise<IStore.OrderStructOutput[]>;

  getSubscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

  getWhitelistedTokens(overrides?: CallOverrides): Promise<string[]>;

  getWithdrawableAssetTokenAmount(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWithdrawableGasTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    manager: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    company: PromiseOrValue<BytesLike>,
    subId: PromiseOrValue<BigNumberish>,
    automationInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  orderList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      number,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      Id: string;
      trackingNumber: string;
      company: string;
      status: number;
      lastUpdate: BigNumber;
      active: boolean;
      lastAutomationCheck: BigNumber;
      value: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeWhiteListedAddress(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeWhitelistedToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setManager(
    manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSubscriptionId(
    subId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeManager(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOrder(
    orderId: PromiseOrValue<BytesLike>,
    trackingNumber: PromiseOrValue<string>,
    shippingCompany: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOrderStatus(
    orderId: PromiseOrValue<BytesLike>,
    status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  withdrawGasToken(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTokenAsset(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawVaultGasToken(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawVaultTokenAsset(
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addFundsToStrategy(overrides?: CallOverrides): Promise<void>;

    addOrder(
      orderNumber: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<boolean>,
      tokenAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addWhiteListedAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addWhitelistedToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAutomationInterval(overrides?: CallOverrides): Promise<BigNumber>;

    getCompanyName(overrides?: CallOverrides): Promise<string>;

    getLockedAssetTokenAmount(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockedGasTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getOrder(
      orderId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IStore.OrderStructOutput>;

    getOrders(overrides?: CallOverrides): Promise<IStore.OrderStructOutput[]>;

    getSubscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    getWhitelistedTokens(overrides?: CallOverrides): Promise<string[]>;

    getWithdrawableAssetTokenAmount(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawableGasTokenAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      manager: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      company: PromiseOrValue<BytesLike>,
      subId: PromiseOrValue<BigNumberish>,
      automationInterval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    orderList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        Id: string;
        trackingNumber: string;
        company: string;
        status: number;
        lastUpdate: BigNumber;
        active: boolean;
        lastAutomationCheck: BigNumber;
        value: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeWhiteListedAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWhitelistedToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setManager(
      manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubscriptionId(
      subId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeManager(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateOrder(
      orderId: PromiseOrValue<BytesLike>,
      trackingNumber: PromiseOrValue<string>,
      shippingCompany: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOrderStatus(
      orderId: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    withdrawGasToken(overrides?: CallOverrides): Promise<void>;

    withdrawTokenAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawVaultGasToken(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawVaultTokenAsset(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OrderCreated(bytes32,uint256)"(
      orderNumber?: PromiseOrValue<BytesLike> | null,
      amount?: null
    ): OrderCreatedEventFilter;
    OrderCreated(
      orderNumber?: PromiseOrValue<BytesLike> | null,
      amount?: null
    ): OrderCreatedEventFilter;

    "OrderUpdated(bytes32,uint8)"(
      orderNumber?: PromiseOrValue<BytesLike> | null,
      status?: null
    ): OrderUpdatedEventFilter;
    OrderUpdated(
      orderNumber?: PromiseOrValue<BytesLike> | null,
      status?: null
    ): OrderUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    addFundsToStrategy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addOrder(
      orderNumber: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<boolean>,
      tokenAsset: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addWhiteListedAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addWhitelistedToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAutomationInterval(overrides?: CallOverrides): Promise<BigNumber>;

    getCompanyName(overrides?: CallOverrides): Promise<BigNumber>;

    getLockedAssetTokenAmount(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockedGasTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getOrder(
      orderId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrders(overrides?: CallOverrides): Promise<BigNumber>;

    getSubscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    getWhitelistedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawableAssetTokenAmount(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawableGasTokenAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      manager: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      company: PromiseOrValue<BytesLike>,
      subId: PromiseOrValue<BigNumberish>,
      automationInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    orderList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeWhiteListedAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeWhitelistedToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setManager(
      manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSubscriptionId(
      subId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeManager(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOrder(
      orderId: PromiseOrValue<BytesLike>,
      trackingNumber: PromiseOrValue<string>,
      shippingCompany: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOrderStatus(
      orderId: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawGasToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTokenAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawVaultGasToken(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawVaultTokenAsset(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFundsToStrategy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addOrder(
      orderNumber: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<boolean>,
      tokenAsset: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addWhiteListedAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addWhitelistedToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAutomationInterval(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompanyName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLockedAssetTokenAmount(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockedGasTokenAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrder(
      orderId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSubscriptionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWhitelistedTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawableAssetTokenAmount(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawableGasTokenAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      manager: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      company: PromiseOrValue<BytesLike>,
      subId: PromiseOrValue<BigNumberish>,
      automationInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    orderList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeWhiteListedAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeWhitelistedToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSubscriptionId(
      subId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOrder(
      orderId: PromiseOrValue<BytesLike>,
      trackingNumber: PromiseOrValue<string>,
      shippingCompany: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOrderStatus(
      orderId: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawGasToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokenAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawVaultGasToken(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawVaultTokenAsset(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
