/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface FactoryInterface extends utils.Interface {
  functions: {
    "beacon()": FunctionFragment;
    "createStore(address,bytes,uint64,uint96)": FunctionFragment;
    "getCurrentVersion()": FunctionFragment;
    "getImplementation()": FunctionFragment;
    "getInstance(address)": FunctionFragment;
    "instanceCounter()": FunctionFragment;
    "instances(address)": FunctionFragment;
    "isInstance(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBeaconInstance(address,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "beacon"
      | "createStore"
      | "getCurrentVersion"
      | "getImplementation"
      | "getInstance"
      | "instanceCounter"
      | "instances"
      | "isInstance"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateBeaconInstance"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "beacon", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createStore",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInstance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "instanceCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "instances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInstance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBeaconInstance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "beacon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instanceCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "instances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInstance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBeaconInstance",
    data: BytesLike
  ): Result;

  events: {
    "InstanceCreated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InstanceCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface InstanceCreatedEventObject {
  admin: string;
  proxy: string;
}
export type InstanceCreatedEvent = TypedEvent<
  [string, string],
  InstanceCreatedEventObject
>;

export type InstanceCreatedEventFilter = TypedEventFilter<InstanceCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    beacon(overrides?: CallOverrides): Promise<[string]>;

    createStore(
      admin: PromiseOrValue<string>,
      companyName: PromiseOrValue<BytesLike>,
      subId: PromiseOrValue<BigNumberish>,
      automationInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentVersion(overrides?: CallOverrides): Promise<[string]>;

    getImplementation(overrides?: CallOverrides): Promise<[string]>;

    getInstance(
      instanceOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    instanceCounter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    instances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { proxy: string; owner: string }>;

    isInstance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBeaconInstance(
      newBlueprint: PromiseOrValue<string>,
      updatedVersion: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  beacon(overrides?: CallOverrides): Promise<string>;

  createStore(
    admin: PromiseOrValue<string>,
    companyName: PromiseOrValue<BytesLike>,
    subId: PromiseOrValue<BigNumberish>,
    automationInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentVersion(overrides?: CallOverrides): Promise<string>;

  getImplementation(overrides?: CallOverrides): Promise<string>;

  getInstance(
    instanceOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  instanceCounter(overrides?: CallOverrides): Promise<BigNumber>;

  instances(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { proxy: string; owner: string }>;

  isInstance(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBeaconInstance(
    newBlueprint: PromiseOrValue<string>,
    updatedVersion: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    beacon(overrides?: CallOverrides): Promise<string>;

    createStore(
      admin: PromiseOrValue<string>,
      companyName: PromiseOrValue<BytesLike>,
      subId: PromiseOrValue<BigNumberish>,
      automationInterval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCurrentVersion(overrides?: CallOverrides): Promise<string>;

    getImplementation(overrides?: CallOverrides): Promise<string>;

    getInstance(
      instanceOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    instanceCounter(overrides?: CallOverrides): Promise<BigNumber>;

    instances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { proxy: string; owner: string }>;

    isInstance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBeaconInstance(
      newBlueprint: PromiseOrValue<string>,
      updatedVersion: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "InstanceCreated(address,address)"(
      admin?: null,
      proxy?: null
    ): InstanceCreatedEventFilter;
    InstanceCreated(admin?: null, proxy?: null): InstanceCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    beacon(overrides?: CallOverrides): Promise<BigNumber>;

    createStore(
      admin: PromiseOrValue<string>,
      companyName: PromiseOrValue<BytesLike>,
      subId: PromiseOrValue<BigNumberish>,
      automationInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    getInstance(
      instanceOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instanceCounter(overrides?: CallOverrides): Promise<BigNumber>;

    instances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInstance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBeaconInstance(
      newBlueprint: PromiseOrValue<string>,
      updatedVersion: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    beacon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createStore(
      admin: PromiseOrValue<string>,
      companyName: PromiseOrValue<BytesLike>,
      subId: PromiseOrValue<BigNumberish>,
      automationInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInstance(
      instanceOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instanceCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    instances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInstance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBeaconInstance(
      newBlueprint: PromiseOrValue<string>,
      updatedVersion: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
